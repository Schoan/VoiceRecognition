<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADI
        GAAAAk1TRnQBSQFMAgEBAwEAAUABAAFAAQABHwEAAR4BAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAF8
        AwABHgMAAQEBAAEgBQABIAE6wQABAQMEAQUDCQEMAwoBDgMAAQH/ANUAAwMBBAMiATEDOAFeA0cBggNQ
        AZoDTgGVAxQBGwgAAwYBCAMUARsDBQEH/wDBAAMRARcDWAHLA1EB5gNQAecDTQHoA1EB5AM2AVgDAAQB
        AQIDNQFXA1YBvANAAXADGAEhAwABAXsAAQEDEwEaAz0BaQNCAXcDHQEqlAADBwEJA1UBsQMtAfQDAAH/
        AwAB/wMAAf8DVwHTAyUBNwMAAQEDPwFtA1EB4wMIAf0DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/
        AwAB/wMAAf8DAAH/AxEB+wNWAdsDLQFGJAADAQECAwUBBwgAAxUBHQNZAdcDWQHVA0QBfANFAX8DTQHo
        A1YBuQMzAVMDNQFVA1kBzwNNAegDUwHiA1YBvAM4AV4DCgEOcAADAQECAyMBMwNGAcIDAAH/AwAB/gM3
        Ad0DHwEskAADRgGBAxEB+wNQAZ4DSQGJA0kBiQNJAYkDSAHpA1YB2wMRARcDOAHxA1cB2gNJAYkDSQGJ
        A0kBiQNJAYkDSQGJA0kBiQNJAYkDSQGJA0kBiQNJAYkDSQGJA0wBkQM5AfADWQHIIAADAwEEAy8BSgNI
        AYUDJwE7AxEBFwMwAUsDVgHcA1UBsQMCAQMDCQEMA1cB2wNNAegDVwHgA1oB2gNMAekDUwGsA1gBwANN
        AecDVwHdAywBQ2wAAwEBAgMlATcDRwHFAy8B4wM/AXADMAFLAx4B7wNDAXiQAANZAc4DSAHpEAADUwGq
        A0wB5AMoATwDAAH/A0wBkzAAA1YBwQMUAfscAAMBAQIDKgFBA1gB0QNRAeYDVwHdA1MBqgNVAd4DUAHn
        A1UBtwMDAQQEAANCAXUDWQHOAzwB7wM5AfIDUgGoBAADBQEHA1UBsQFTAVEBUwHjAycBOmgAAwEBAgMo
        AT0DRwHIAzQB3gM6AWMDEgEZA0sBlQMnAesDNwFakAADWQHOA0gB6RAAA1MBqgNMAeQDKAE8AwAB/wNM
        AZMwAANWAcEDFAH7HAADIwEzA1kBzANMAekDWQHJA0sB6wNNAegDSwHrA00BlgMiATIDAAEBDAADBQEH
        AxoBJQMNARIDAAEBAyQBNgNXAd0DWAHYAxIBGGQAAwEBAgMrAUIDRQHKAzoB2gM5AV8DFQEdA0oBmAMZ
        AfIDSgGaAwQBBZAAA1kByQNIAekQAANTAaoDTAHkAygBPAMAAf8DTAGTMAADVgHBAyYB9xgAAwIBAwNO
        AZgDUQHmA1QBqwMEAQYDKwFDA1QBrwMsAUQDAAEBIwABAQM4AV0DUAHmA1gB2wM2AVgDJgE4AzEBTwMf
        AS04AAMEAQYDCQEMAwYBCAMBAQIMAAMCAQMDLwFJA0IBzAM9AdYDNwFbAxgBIQNLAZwDHAHwA0kBlgME
        AQaUAANMAZIDAQH+A0QBegMyAVADMgFQAzIBUANIAekDTAHkAw4BEwMlAfYDPAHvAzUBVgMyAVADMgFQ
        AzIBUAMyAVADMgFQAzIBUAMyAVADMgFQAzIBUAMyAVADOAFeAy0B9ANXAdMcAANUAasDUQHmA1IBqAMU
        ARwXAAEBAwgBCwMRARcDDQESAwMBBBAAA0UBfwNMAekDVQHeA1cB4ANRAeYDUAGkAwYBCCQAAwEBAgMm
        ATkDSAGNA0EB0QMYAfMDAwH9AwwB+QM0Ad4DSgGkAzIBUAMOARMDMQFOA0IBzwM/AdIDNQFXAxoBJQNM
        AaADIAHuA0kBkAMEAQWYAAMNARIDVgG+AwAB/wMAAf8DAAH/AwAB/wNJAegDKgFABAADOQFgAyAB+AMA
        Af8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMrAfUDMQFOHAADFwEg
        A1kB2gNRAeQDTAGRAwMBBAsAAQEDGwEmA0MBdwNUAa4DVwHCA1YBvANOAZUDLgFIAwgBCwgAAwcBCgNS
        AagDPwHvA0gB6QNNAecDVQHeAycBOwMAAQEcAAMdASoDTAGsAxkB8gMSAfcDRwHIA0oBmgNHAYcDSQGR
        A0oBugMnAeoDAwH8AywB5gMuAeQDQwHOAzMBUgMdASkDSgGkAycB6wNIAYsDBAEFoAADBQEHAxcBIAMX
        ASADFwEgAxcBIAMLAQ8LAAEBAxIBGQMXASADFwEgAxcBIAMXASADFwEgAxcBIAMXASADFwEgAxcBIAMX
        ASADFwEgAxcBIAMNAREcAAMBAQIDCQEMA04BlgNQAecDSAGIAwABAQcAAQEDJAE1A1UBsgNQAecDSwHr
        AVABTwFQAeYDSAHqA0oB6gNYAdgDQAFuAwcBCggAAwoBDQMkATYDBAEGA0MBdwNQAecDTAGTAwMBBBgA
        AzABSwM5AdkDHgHvA0kBjgMcAScDAgEDEAADEgEYAz8BbgM9AdUDRQHKAzEBTgMfAS0DSwGpAygB6ANH
        AYUDBAEFpAADQgF0AzwB7wM8Ae8DPAHvAzwB7wNVAbQIAAMcAScDVgHZAzwB7wM8Ae8DPAHvAzwB7wM8
        Ae8DPAHvAzwB7wM8Ae8DPAHvAzwB7wM8Ae8DPAHvA1kBygMPARQUAAMWAR8DNwFbA0YBfwFWAVQBVgHh
        A1AB5gMRARcIAAMNAREDVQG3A00B6AFRAVABUQHlAysBQgMAAQEDDQESA08BmwFKAUkBSgHsA1YB4QMx
        AU4DAAEBCwABAQMSARkDPQFoA1MB4wNYAcsDDAEQFAADKwFCAzIB3wM9AdYDLAFEAwcBCQMmATkDSQGP
        A0MBzQMuAeQDPQHXA0sBpQMxAU8DCwEPAxIBGQMXASADIgEyA0wBrAMsAeYDRAF/AwQBBaQAAzwBaAMS
        AfsDWAHNA1UBtANVAbQDVQG0AxkB+gNYAcADCAELA1YB2wMhAfgDVgG4A1UBtANVAbQDVQG0A1UBtANV
        AbQDVQG0A1UBtANVAbQDVQG0A1UBtANWAbwDCQH8A1UBtBAAAwEBAgNHAYADVwHdA1EB5gNLAesDVAGv
        AwABAQcAAQEDMAFLA1QB4QNXAb0DDQERDAADAwEEAzsBYwFRAVABUQHmA1YBswMHAQoIAAMbASYDVQG1
        A1QB3wNJAewDVQGxAwkBDBAAAxABFQNBAdADNwHcAyYBOQMQARUDSQGRAyMB7AMVAfQDRQHKA0sBrgNJ
        Ab8DKAHpAwwB+QNMAa0DJAE1AxEBFwNHAYQDIAHuA0kBkAMEAQWoAANVAboDRQHsAwMBBAwAA1QBrwNM
        AeQDKAE8AwAB/wNOAZgvAAEBA1cBxwM+Ae4QAAMCAQMDUQGnA1AB5wNSAagDQgF0AyEBMQgAAwEBAgNO
        AZQDUAHnAzoBYRQAAwQBBQNXAcIDWQHTAxQBGwgAAx8BLANQAecBUwFRAVMB4wM9AWoDAQECFAADRwGE
        Ax4B7wM1AVcDDwEUA0oBpAMeAe8DSwGfAx8BLQMCAQMIAAMTARoDRAF/Ay8B4wNKAbcDJgE4Ay0BRQNE
        AcsDSwGyAxABFagAA1kBzgNIAekQAANTAaoDTAHkAygBPAMAAf8DTAGTMAADVgHBAxQB+xAAAwIBAwNT
        AbADUAHnAyQBNgMAAQEMAAMCAQMDVgGzA1AB5wMmATkUAAMBAQIDUwGsA1gB2wMXASAIAAMWAR4BUwFR
        AVMB5QNYAdEDBwEJFAADBwEKAzkB2wNKAboDFQEdA0EBcgMuAeUDRwGEAxMBGhQAAwQBBgM8AWcDNwHd
        A0oBmgMZASMDQwF4Az0B1gM3AVuoAANZAc4DSAHpEAADUwGqA0wB5AMoATwDAAH/A0wBkzAAA1YBwQMU
        AfsTAAEBA1IBpgNRAeYDVAGrA0gBhQMtAUYDAAEBCAADTAGRA1AB5wM+AWoDAAEBEAADDwEUA1cBxQNZ
        AdMDEAEWCAADHwEsA1AB5wNXAeADRQF8AxsBJgMBAQIMAAMrAUMDIQHtAz4BbAMTARoDRwHIA0gBwAMg
        AS4cAAMRARcDSAGMA0IBzAMzAVIDLwFKA0EB0ANJAZCoAANRAaEDMgHzAyoBQAMhATADIQEwAyEBMANZ
        AckDUQHjAyEBMQMKAfwDVgG5AyIBMgMhATADIQEwAyEBMAMhATADIQEwAyEBMAMhATADIQEwAyEBMAMh
        ATADJAE1A1cB2gNUAd0TAAEBA0QBegNMAekDSwHrA1AB5wNUAa8DBwEJCAADJgE5A1AB5ANYAcADIgEx
        AwUBBwMAAQEDAgEDAxIBGANFAXwDUwHjA1UBtAMEAQYIAAMWAR4DVgG2A0wB6QNRAeQDUwGqAwsBDwwA
        Az8BbgMZAfIDKAE9AysBQgM5AdsDQwF5AxABFSAAAzgBXQNDAc0DQwF8AyQBNgNKAbgDSwGvAwIBA6QA
        AyMBMwMuAfQDAAH/AwAB/wMAAf8DAAH/AwAB/wNIAYcDAQECA1ABpAMAAf8DAAH/AwAB/wMAAf8DAAH/
        AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A0oBjBgAAw0BEgM1AVYDSgHqA1QB3wMf
        ASwIAAMFAQcDVgG8A1AB5wNbAc4DQgF2AzIBUAM4AV4DUgGjA1EB5gNGAewDJQE3FAADKwFCA1MB4wFZ
        AVgBWQHNAwkBDAwAA0UBgQMVAfQDHQEpAzUBVwMzAeEDNwFcAwkBDCAAAzABTANHAcMDSQGOAyABLwNM
        AawDSwG5AwcBCqgAAxwBJwMxAU8DMQFPAzEBTwMxAU8DKAE8CAADCgENAzABSwMxAU8DMQFPAzEBTwMx
        AU8DMQFPAzEBTwMxAU8DMQFPAzEBTwMxAU8DMQFPAzEBTwMrAUMDBQEHHAADAwEEA1EBoANRAeYDSQGJ
        AwEBAggAAxMBGgNTAbABSQFGAUkB7ANTAeMDWgHaA1UB3gNMAekDRwHqAzMBUwsAAQEDHgErAzYBWQMp
        AT4DSAGFA1AB5wNMAZMDAAEBDAADQwF6AxgB8wMhATADMgFQAzIB3wM8AWYDCwEPIAADMwFSA0UBxwNH
        AYgDIgEyA0sBsANKAbUDBQEHqAADKAE9A0IBdgNCAXYDQgF2A0IBdgM2AVkDBAEFBAADDQESAz0BaQNC
        AXYDQgF2A0IBdgNCAXYDQgF2A0IBdgNCAXYDQgF2A0IBdgNCAXYDQgF2A0IBdgM6AWIDCgEOGwABAQMm
        ATkDWgHNA0wB6QNMAZEDAgEDDAADBgEIAzoBYgNTAawDVwG/A1YBuQNKAYsDFAEcDAADFQEdA1QBqwNT
        AeIDWQHSA1UB3gNRAeMDHAEnEAADNwFbAxwB8AMzAVIDHwEtAz0B1gNKAZgDFwEgHAADAwEEAz8BcAM/
        AdMDPQFqAykBPwNHAcMDSwGiqAADJAE2AwoB/QMAAf8DAAH/AwAB/wMAAf8DAAH/A1ABpAQAA1YBuAMA
        Af8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/A00BlRgA
        AwQBBQNQAaMDUQHmA1EBogcAAQEDCwEPAwEBAigAAw0BEgNMAZIDUQHmAz8B7wM3AfMDPQHwA1ABnxQA
        AxkBIwMoAekDSQGRAxABFgNLAaUDMwHhAy8BSgMEAQYYAAMnAToDSgG1A0oBtgMkATUDNwFcAzoB2gNC
        AXeoAANVAbIDOQHwAx0BKQMUARsDFAEbAxQBGwNXAb8DTAHkAyABLwMJAfwDVQGyAxUBHQMUARsDFAEb
        AxQBGwMUARsDFAEbAxQBGwMUARsDFAEbAxQBGwMUARsDFgEfA1gB0gNIAekcAANMAZMDUQHmA1IBqAMj
        ATMDOwFjA1MBsAM7AWMDEgEYAwEBAiAAAz0BZwFWAVQBVgHhA1QB3wMnAToDEwEaAyABLgMRARcYAANK
        AbYDMwHhAyABLgMkATUDQQHRAz8B0gMuAUcDBAEGEAADIAEuA0wBpgMyAd8DPwFvAx4BKwNMAaADRgHG
        AyUBN6gAA1gBzQNIAekQAANTAaoDTAHkAygBPAMAAf8DTAGTMAADVgHBAwQB/hwAAxYBHwNZAdQDUAHn
        A1kBwwNWAeEDTQHoA1cB4ANRAaUDMgFRAwEBAgQAAwoBDQMTARoDGwEmAywBRAMdASkDAAEBAxgBIgNU
        AeEDWQHTAxMBGiQAAy4BRwMoAegDSwGeAxQBGwMyAVADPQHVAyEB7QNLAZ0DMgFQAyEBMQMrAUIDRwGF
        AzsB2AMoAegDRAF9AxIBGQM+AWwDMwHhA0gBjQMAAQGoAANZAc4DSAHpEAADUwGqA0wB5AMoATwDAAH/
        A0wBkzAAA1YBwQMAAf8gAAMOARMDVwHbA0wB6QM5AfIDVAGrAzkB8gNQAecDVQG3AwIEAwEEA0QBewNW
        AbkDWwHOA1EB5ANTAawDFAEbAxgBIQNWAbsDUwHiAywBRCgAA0oBkwMcAfADRgGCAxEBFwMgAS8DSgGk
        Ax4B7wMAAf8DAAH/AwAB/wMJAfoDSAHAAzIBUAMLAQ8DOQFgAzQB3gNMAbMDGQEjrAADUwGwAzkB8AML
        AQ8MAANWAbkDTAHkAyYBOAMBAf4DUAGaLAADBAEFA1kBzwNIAekkAAMdASoDPQFqAxQBHAQAAyMBMwNW
        AdwDVQG0AwoBDgMVAR0DWgHVA0wB6QM9AfADRAHtA1MB5QNVAbEDVgHBA1MB4wNLAekDKQE+KAADBwEK
        A0sBqQMYAfMDSwGlAx8BLAMDAQQDFQEdAzABSwM6AWIDNAFVAx0BKQMFAQcDEwEaA0UBgAMoAegDSgG9
        AycBOrAAAzIBUAMrAfUDRgHsA1EB3wNRAd8DUQHfAwEB/gNTAaoDBAEFA1kBzwMSAfsDUQHfA1EB3wNR
        Ad8DUQHfA1EB3wNRAd8DUQHfA1EB3wNRAd8DUQHfA1EB3wNMAeQDAQH+A1EBoDQAAxQBGwNYAdgDWgHV
        A04BmQNQAZsDUQHmA1UBtwMcAScDGAEhA1kB1QNNAegDSwHrA1YBvgMpAT4wAAMHAQoDSAGLAyMB7AMj
        AewDSwGeAzEBTwMWAR4DCAELAxABFQMoAT0DRwGFAz0B1gMTAfUDSwGpAyABL7gAAzEBTwNUAd4DAAH/
        AwAB/wMAAf8DRgGBCAADEQEXA1QBqwMdAfkDAAH/AwAB/wMAAf8DAAH/AwAB/wMAAf8DAAH/AwAB/wMA
        Af8DAAH/Ay4B9ANNAZUDBgEINAADDwEUA1kB2gNCAe4DTAHpA1AB5wFQAU0BUAHnAysBQwgAAyYBOANY
        AdQDJwE7QAADKAE9A0wBqgMeAe8DAAH/AwAB/wMAAf8DAAH/AwAB/wMPAfgDRwHEAzcBWwMKAQ3/AFQA
        AQEDEAEVAyYBOQM3AVoDRAF8A0UBfwMLAQ8MAAMCAQNMAAMUARwDMQFPA0IBdwNHAYcDRAF+AzgBXQMd
        ASkDBAEG/wD/AP8A/wCYAAFCAU0BPgcAAT4DAAEoAwABfAMAAR4DAAEBAQABAQUAAeABARYAA/8BAAX/
        AeAF/wH4BAAF/wGAAccE/wH4BAAF/wGAAQED/wH4ATgEAAHgAgABDwH5AYABAAP/AfABGAQAAeACAAEP
        AfACAAP/AeABGAQAAecBgwH/Ac8B4AEEARAD/wHAARgEAAHnAYMB/wHPAeABBwEAA/8BgAEYBAAB5wGD
        Af8BzwHAAR8B4AEfAf8BhwEAATgEAAHgAgABDwHhAfABeAEPAfgCAAF4BAAB4AEQAQABDwHgAcABGAEH
        AfACAAH4BAAB8AEwAQABHwHAAYABDAEHAeABeAEBAfgEAAHwATABAAEPAYEBgAEGAQcBwAEAAQMB+AQA
        AeACAAEPAQEBBwEGAQcBgAEAAQcB+AQAAeMBgwH/AY8BAwEPAYYBDwGAATABBwH4BAAB5wGDAf8BzwEH
        AQ8BhgEfAQAB+AEHAfgEAAHnAYMB/wHPAQEBhwGGAQcBAQH8AQcB+AQAAeACAAEPAQEBgAEGAQcBAQH+
        AQMB+AQAAeACAAEPAcEBgAEPAYcBAQH+AQMB+AQAAfABMAEAAQ8B4AHAARgBBwEBAf4BAwH4BAAB8AEQ
        AQABDwHAAeABOAEPAQEB/AEHAfgEAAHgARABAAEPAcIBPwHwAR8BAAH8AQcB+AQAAeACAAEPAeABDwHw
        AR8BgAF4AQcB+AQAAecBgwH/Ac8B4AEEAQAB/wGAAQABBwH4BAAB5wGDAf8BzwHwAgAB/wHAAQABDwH4
        BAAB4wGDAf8BjwH4AYABAAH/AcABAAEfAfgEAAHgAgABDwH/AYABAQH/AeABAAE/AfgEAAHwATABAAEP
        Af8BgAHHAf8B+AEAAX8B+AQABf8BgAHvAf8B/gEBAf8B+AQAC/8B+AQAC/8B+AQACw==
</value>
  </data>
</root>